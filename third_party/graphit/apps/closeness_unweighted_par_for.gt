element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex, Vertex) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const checked : vector{Vertex}(float) = -1;
const scores: vector{Vertex}(double) = 0;

func updateEdge[checked_local: vector{Vertex}(float)](src : Vertex, dst : Vertex)
     checked_local[dst] = checked_local[src] + 1;
end

func toFilter[checked_local: vector{Vertex}(float)](v : Vertex) -> output : bool
     output = checked_local[v] == -1;
end

func main()
        startTimer();

        #l1# par_for i in 0:64

            var checked_local : vector{Vertex}(float) = -1;

            var start_vertex : int = atoi(argv[2]);
            checked_local[start_vertex] = 0;

            var frontier : vertexset{Vertex} = new vertexset{Vertex}(0);

            frontier.addVertex(start_vertex);

            while (frontier.getVertexSetSize() != 0)

                #s1# var output : vertexset{Vertex} = edges.from(frontier).to(toFilter[checked_local]).applyModified(updateEdge[checked_local], checked_local);
                delete frontier;
                frontier = output;

            end
            delete frontier;


            var notConnected : vertexset{Vertex} = vertices.filter(toFilter[checked_local]);
            var amountNotConnected : float = notConnected.getVertexSetSize();
            var sum: float = checked_local.sum();
            sum = sum + amountNotConnected;

            scores[start_vertex] = sum;
            delete checked_local;
        end

        var elapsed_time : float = stopTimer();
        print "elapsed time: ";
        print elapsed_time;
end


